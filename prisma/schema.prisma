// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk kategori toko
enum StoreCategory {
  SUPERMARKET
  APOTEK
  MAKANAN_MINUMAN
}

// Enum untuk role user
enum UserRole {
  CUSTOMER
  STORE_OWNER
  ADMIN
}

// Enum untuk tipe produk
enum ProductType {
  SUPERMARKET
  PHARMACY
  FOOD
}

// Model User untuk basic authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique
  name      String
  role      UserRole @default(CUSTOMER)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi untuk store owner
  stores    Store[]

  @@map("users")
}

// Model untuk toko
model Store {
  id          String        @id @default(cuid())
  ownerId     String
  name        String
  description String?
  category    StoreCategory
  address     String
  phone       String
  email       String?
  image       String?
  isActive    Boolean       @default(true)
  openTime    String        // Format: "08:00"
  closeTime   String        // Format: "22:00"
  isOpen      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("stores")
}

// Model unified untuk semua produk
model Product {
  id          String      @id @default(cuid())
  storeId     String
  productType ProductType // Discriminator field
  name        String
  description String?
  price       Float
  purchasePrice Float?    // Harga beli dari supplier
  image       String?
  category    String      // Kategori produk berdasarkan jenis toko
  stock       Int         @default(50)
  weight      Int         // Berat produk dalam gram
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Common fields
  unit        String?     // Satuan (pcs, kg, liter, strip, botol, porsi, dll)
  
  // Supermarket specific fields
  brand       String?     // Merek produk (untuk supermarket)
  
  // Pharmacy specific fields
  manufacturer            String?  // Pabrik pembuat (untuk apotek)
  isPrescriptionRequired  Boolean? // Apakah butuh resep (untuk apotek)
  
  // Food specific fields
  preparationTime Int?     // Waktu persiapan dalam menit (untuk makanan)
  isSpicy         Boolean? // Apakah pedas (untuk makanan)
  isVegetarian    Boolean? // Apakah vegetarian (untuk makanan)
  isHalal         Boolean? // Apakah halal (untuk makanan)

  // Relasi
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Index untuk performa
  @@index([storeId])
  @@index([productType])
  @@index([category])
  @@index([isActive])
  @@map("products")
}

// ======================= Data Wilayah =======================
model Kecamatan {
  id               Int            @id @default(autoincrement())
  nama_kecamatan   String         @db.VarChar(100)
  
  // Relasi ke desa/kelurahan
  desa_kelurahan   DesaKelurahan[]
  
  @@map("kecamatan")
}

model DesaKelurahan {
  id                    Int       @id @default(autoincrement())
  nama_desa_kelurahan   String    @db.VarChar(100)
  kecamatan_id          Int
  
  // Relasi ke kecamatan
  kecamatan             Kecamatan @relation(fields: [kecamatan_id], references: [id], onDelete: Cascade)
  
  // Relasi ke dusun
  dusun                 Dusun[]
  
  @@map("desa_kelurahan")
}

model Dusun {
  id                  Int           @id @default(autoincrement())
  nama_dusun          String        @db.VarChar(100)
  desa_kelurahan_id   Int
  
  // Atribut baru untuk shipping
  shipping_cost       Int           @default(5000)  // Ongkos kirim dalam rupiah
  is_active          Boolean       @default(false)   // Status default nonaktif untuk delivery
  delivery_notes     String?       @db.Text         // Catatan khusus untuk pengiriman
  
  // Relasi ke desa/kelurahan
  desa_kelurahan      DesaKelurahan @relation(fields: [desa_kelurahan_id], references: [id], onDelete: Cascade)
  
  @@map("dusun")
}