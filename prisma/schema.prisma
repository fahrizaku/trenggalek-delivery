// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk tipe produk
enum ProductType {
  SUPERMARKET
  PHARMACY
  FOOD
}

// Model unified untuk semua produk
model Product {
  id            String      @id @default(cuid())
  productType   ProductType // Discriminator field
  name          String
  description   String?
  price         Float
  purchasePrice Float?    // Harga beli dari supplier
  image         String?
  category      String      // Kategori produk
  stock         Int         @default(50)
  weight        Int         // Berat produk dalam gram
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  unit          String?     // Satuan (pcs, kg, liter, strip, botol, porsi, dll)
  
  // Supermarket specific fields
  brand       String?     // Merek produk (untuk supermarket)
  
  // Pharmacy specific fields
  isPrescriptionRequired  Boolean? // Apakah butuh resep (untuk apotek)
  
  // Food specific fields
  preparationTime Int?     // Waktu persiapan dalam menit (untuk makanan)
  
  // Index untuk performa
  @@index([productType])
  @@index([category])
  @@index([isActive])
  @@map("products")
}

// =============================================================
// ======================= Data Wilayah ========================
// =============================================================

model Kecamatan {
  id               Int            @id @default(autoincrement())
  nama_kecamatan   String         @db.VarChar(100)
  
  // Relasi ke desa/kelurahan
  desa_kelurahan   DesaKelurahan[]
  
  @@map("kecamatan")
}

model DesaKelurahan {
  id                    Int       @id @default(autoincrement())
  nama_desa_kelurahan   String    @db.VarChar(100)
  kecamatan_id          Int
  
  // Relasi ke kecamatan
  kecamatan             Kecamatan @relation(fields: [kecamatan_id], references: [id], onDelete: Cascade)
  
  // Relasi ke dusun
  dusun                 Dusun[]
  
  @@map("desa_kelurahan")
}

model Dusun {
  id                  Int           @id @default(autoincrement())
  nama_dusun          String        @db.VarChar(100)
  desa_kelurahan_id   Int
  
  // Atribut baru untuk shipping
  shipping_cost       Int           @default(5000)  // Ongkos kirim dalam rupiah
  is_active          Boolean        @default(false)   // Status default nonaktif untuk delivery
  delivery_notes     String?        @db.Text         // Catatan khusus untuk pengiriman
  
  // Relasi ke desa/kelurahan
  desa_kelurahan      DesaKelurahan @relation(fields: [desa_kelurahan_id], references: [id], onDelete: Cascade)
  
  @@map("dusun")
}